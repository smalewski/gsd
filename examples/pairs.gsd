data Assoc = Empty | Cons {k : ?, v : ?, tl : Assoc}

insert : Assoc -> ? -> ? -> Assoc
insert env x v = Cons x v env

lookup : ? -> Assoc -> ?
lookup x env =
  match env with
    Empty         => NotFound {var = x}
    Cons k v rest => if x == k then v else lookup x rest

open data Expr = Var {x : ?}
               | Lambda {x : ?, e : Expr}
               | App {e1 : Expr, e2 : Expr}

eval env expr =
  match expr with
    Pair e1 e2 => let v1 = eval env e1
                      v2 = eval env e2
                   in Pair {e1 = v1, e2 = v2}
    Proj1 e    => (match (eval env e) with
                    Pair v1 v2 => v1
                    _          => ErrorNonPair)
    Proj2 e    => (match (eval env e) with
                    Pair v1 v2 => v2
                    _          => ErrorNonPair)
    Var x      => lookup x env
    Lambda x e => Clos {x = x, expr = e, env = env}
    App e1 e2  => let v1 = eval env e1
                      v2 = eval env e2
                   in (match v1 with
                        Clos x ex envx => eval (insert envx x v2) ex
                        _              => AppliedNonLambda {expr = v1})


-- \x => x
id = Lambda { x = "x", e = Var { x = "x" } }
-- \x => x x
omega = Lambda { x = "x", e = App { e1 = Var { x = "x" }, e2 = Var { x = "x" } } }
-- \x => x x x
omega3 = Lambda {x = "x", e = App { e1 = App { e1 = Var { x = "x" }, e2 = Var { x = "x" }}, e2 = Var  { x = "x" }} }

-- (p1 <(\x => x x x), (\x => x)>) (\x => x)
eval Empty (App (Proj1 {x= (Pair { e1 = omega3, e2 = id }) }) id)